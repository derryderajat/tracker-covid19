{"version":3,"sources":["InfoBox.js","utils.js","Map.js","Table.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","title","cases","casesType","active","total","props","isRecovered","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","showDataOnMap","map","country","Circle","countryInfo","lat","long","Math","sqrt","Popup","prettyPrintStat","stat","numeral","format","Map","countries","center","zoom","scrollWheelZoom","TileLayer","attribution","url","Table","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxis","type","yAxis","gridLines","ticks","callback","index","values","autoSkip","plugins","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetchData","fetch","then","res","json","console","log","length","datasets","backgroundColor","borderColor","fill","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","getCountriesData","name","iso2","sortedData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","path","element","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f7b04dec.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./infoBox.css\";\r\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\r\nfunction InfoBox({ title, cases, casesType, active, total, ...props }) {\r\n  const isRecovered = casesType === \"recovered\" ? true : false;\r\n  return (\r\n    <Card\r\n      onClick={props.onClick}\r\n      className={`infoBox ${active && \"infoBox--selected\"}`}\r\n    >\r\n      <CardContent>\r\n        {/* Title */}\r\n        <Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n          {title}\r\n        </Typography>\r\n        {/* Number of Cases */}\r\n        <h2 className={`infoBox--cases ${isRecovered && \"infoBox--recovered\"}`}>\r\n          {cases}\r\n        </h2>\r\n        {/* Total */}\r\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n          {total} Total\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from \"react\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\nimport numeral from \"numeral\";\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n\r\n    multiplier: 800,\r\n  },\r\n  recovered: {\r\n    hex: \"#7dd71d\",\r\n\r\n    multiplier: 1200,\r\n  },\r\n  deaths: {\r\n    hex: \"#fb4443\",\r\n\r\n    multiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n// Draw circles on the map\r\nexport const showDataOnMap = (data, casesType = \"cases\") => {\r\n  data.map((country) => (\r\n    <Circle>\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      color={casesTypeColors[casesType].hex}\r\n      radius=\r\n      {Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n      <Popup>Im Popup</Popup>\r\n    </Circle>\r\n  ));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n","import React from \"react\";\r\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { showDataOnMap } from \"./utils\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  return (\r\n    <div className=\"map\">\r\n      <LeafletMap center={center} zoom={zoom} scrollWheelZoom={false}>\r\n        <TileLayer\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n        />\r\n        {showDataOnMap(countries, casesType)}\r\n      </LeafletMap>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Map;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport numeral from \"numeral\";\r\nimport { sortData, prettyPrintStat } from \"./utils\";\r\nfunction Table({ countries }) {\r\n  return (\r\n    <div className=\"table\">\r\n      {countries.map(({ country, cases }) => (\r\n        <tr>\r\n          <td>{country}</td>\r\n          <td>\r\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\r\n          </td>\r\n        </tr>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport Chart from \"chart.js/auto\";\r\nimport numeral from \"numeral\";\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: true,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0.0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxis: [\r\n      {\r\n        type: \"time\",\r\n      },\r\n    ],\r\n\r\n    yAxis: {\r\n      gridLines: {\r\n        display: false,\r\n      },\r\n      ticks: {\r\n        callback: function (value, index, values) {\r\n          return numeral(value).format(\"0 a\");\r\n        },\r\n        autoSkip: true,\r\n      },\r\n    },\r\n  },\r\n  plugins: { legend: { display: false } },\r\n};\r\nfunction LineGraph({ casesType }) {\r\n  const [data, setData] = useState({});\r\n  const buildChartData = (data, casesType) => {\r\n    let chartData = [];\r\n    let lastDataPoint;\r\n\r\n    for (let date in data[casesType]) {\r\n      if (lastDataPoint) {\r\n        let newDataPoint = {\r\n          x: date,\r\n          y: data[casesType][date] - lastDataPoint,\r\n        };\r\n        chartData.push(newDataPoint);\r\n      }\r\n      lastDataPoint = data[casesType][date];\r\n    }\r\n    return chartData;\r\n  };\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=30\")\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          console.log(\"sesudah\", data[casesType]);\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n        });\r\n    };\r\n    fetchData();\r\n  }, []);\r\n  return (\r\n    <div>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          options={options}\r\n          data={{\r\n            datasets: [\r\n              {\r\n                label: { casesType },\r\n                backgroundColor: \"rgba(204,16,52,0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n                fill: true,\r\n              },\r\n            ],\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;\r\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Map from \"./Map\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./utils\";\nimport LineGraph from \"./LineGraph\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((res) => res.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((res) => res.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n\n          const sortedData = sortData(data);\n          setTableData(sortedData);\n          setMapCountries(data);\n          setCountries(countries);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((res) => res.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <BrowserRouter>\n      <div className=\"app\">\n        {/* Header */}\n        <div className=\"app__left\">\n          <div className=\"app__header\">\n            <h1>COVID-19 TRACKER</h1>\n\n            <FormControl className=\"app__dropdown\">\n              <Select\n                variant=\"outlined\"\n                onChange={onCountryChange}\n                value={country}\n              >\n                {/* Looping all the countries */}\n\n                <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n                {countries.map((country) => (\n                  <MenuItem value={country.value}>{country.name}</MenuItem>\n                ))}\n              </Select>\n            </FormControl>\n          </div>\n\n          {/* Title */}\n          <div className=\"app__stats\">\n            {console.log(countryInfo)}\n            <InfoBox\n              onClick={(e) => setCasesType(\"cases\")}\n              active={casesType === \"cases\"}\n              title=\"Coronavirus Cases\"\n              total={prettyPrintStat(countryInfo.cases)}\n              cases={prettyPrintStat(countryInfo.todayCases)}\n            />\n            <InfoBox\n              casesType={casesType}\n              onClick={(e) => setCasesType(\"recovered\")}\n              active={casesType === \"recovered\"}\n              title=\"Recovered\"\n              total={prettyPrintStat(countryInfo.recovered)}\n              cases={prettyPrintStat(countryInfo.todayRecovered)}\n            />\n            <InfoBox\n              onClick={(e) => setCasesType(\"deaths\")}\n              active={casesType === \"deaths\"}\n              title=\"Deaths\"\n              total={prettyPrintStat(countryInfo.deaths)}\n              cases={prettyPrintStat(countryInfo.todayDeaths)}\n            />\n          </div>\n\n          {/* Map */}\n          <Map\n            casesType={casesType}\n            countries={mapCountries}\n            center={mapCenter}\n            zoom={mapZoom}\n          />\n        </div>\n\n        <Card className=\"app__right\">\n          <CardContent>\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new cases</h3>\n            <LineGraph casesType=\"cases\" />\n          </CardContent>\n        </Card>\n      </div>\n      <Routes>\n        <Route path=\"/tracker-covid19\" element={<App />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}